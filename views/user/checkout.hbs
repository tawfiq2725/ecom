<div class="page-wrapper">
    <div class="checkout shopping">
        <div class="container">
            <div class="row">
                <div class="col-md-8">
                    <div class="block billing-details">
                        <h4 class="widget-title">Billing Details</h4>
                        <form class="checkout-form" method="POST" action="/orders">
                            <input type="hidden" id="isAddingNewAddress" name="isAddingNewAddress" value="false">
                            <input type="hidden" name="couponCode" id="hiddenCouponCode">
                            {{#if addresses}}
                            {{#each addresses}}
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="addressId" id="address{{_id}}"
                                    value="{{_id}}">
                                <label class="form-check-label" for="address{{_id}}">
                                    {{place}}, {{houseNumber}}, {{street}}, {{city}}, {{zipcode}}, {{country}}
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-default"
                                            onclick="editAddress('{{this._id}}')"><i class="tf-pencil2"
                                                aria-hidden="true"></i></button>
                                        <button type="button" class="btn btn-default"
                                            onclick="deleteAddress('{{this._id}}')"><i class="tf-ion-close"
                                                aria-hidden="true"></i></button>
                                    </div>
                                </label>
                            </div>
                            <div class="form-check">
                                <a href="/address" role="button" class="btn btn-success">Add Address</a>
                            </div>
                            {{/each}}
                            {{else}}
                            <div class="form-check">
                                <a href="/address" role="button" class="btn btn-success">Add Address</a>
                            </div>
                            {{/if}}


                            <h4 class="widget-title">Payment Method</h4>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="cod" value="COD">
                                <label class="form-check-label" for="cod">
                                    Cash on Delivery
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="wallet"
                                    value="Wallet">
                                <label class="form-check-label" for="wallet">
                                    Wallet
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="razorpay"
                                    value="Razorpay">
                                <label class="form-check-label" for="razorpay">
                                    Razorpay
                                </label>
                            </div>



                            <button type="submit" class="btn btn-main mt-20">Place Order</button>
                        </form>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="product-checkout-details">
                        <div class="block">
                            <h4 class="widget-title">Order Summary</h4>
                            {{#each cart.items}}
                            <div class="media product-card">
                                <a class="pull-left" href="product-single.html">
                                    <img class="media-object" src="/uploads/products/{{this.product.mainImage}}"
                                        alt="Image">
                                </a>
                                <div class="media-body">
                                    <h4 class="media-heading"><a href="product-single.html">{{this.product.name}}</a>
                                    </h4>
                                    <p class="price">{{this.quantity}} x {{this.product.price}}</p>
                                </div>
                            </div>
                            {{/each}}
                            <ul class="summary-prices">
                                <li>
                                    <span>Shipping:</span>
                                    <span>Free</span>
                                </li>
                                <li id="coupon">
                                    {{#if couponDetails}}
                                    <div id="couponInfo">
                                        <span>Coupon Applied: -$${{couponDetails.discountAmount}}</span>
                                        <a href="#" id="removeCoupon" class="btn btn-danger">Remove</a>
                                    </div>
                                    {{else}}
                                    <div id="couponInfo">
                                        <span>Coupon Code:</span>
                                        <span><a href="#" id="openCouponModal">Enter Coupon Code</a></span>
                                    </div>
                                    {{/if}}
                                </li>
                            </ul>
                            <div class="summary-total">
                                <span>Total</span>
                                <span class="price">${{cart.totalPrice}}</span>
                            </div>

                            <div class="verified-icon">
                                <img src="/images/shop/verified.png" alt="Verified">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
{{!-- <div class="modal fade" id="coupon-modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <form id="couponForm">
                    <div class="form-group">
                        <input id="modalCouponCode" class="form-control" type="text" placeholder="Enter Coupon Code">
                    </div>
                    <button type="button" id="applyModalCoupon" class="btn btn-main">Apply Coupon</button>
                </form>
            </div>
        </div>
    </div>
</div> --}}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    // Function to handle applying a coupon
    function applyCoupon(couponCode) {
        fetch('/api/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponCode })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(err.message); });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                document.getElementById('hiddenCouponCode').value = couponCode;
                updateCouponInfo(data.discountAmount, data.newTotal);
                
                Swal.fire({
                    title: 'Coupon Applied',
                    text: `Discount applied: $${data.discountAmount}`,
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
            } else {
                Swal.fire({
                    title: 'Invalid Coupon',
                    text: data.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error applying coupon:', error);
            Swal.fire({
                title: 'Error',
                text: 'An error occurred while applying the coupon. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    }

    // Function to handle removing a coupon
    function removeCoupon() {
        fetch('/api/remove-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('hiddenCouponCode').value = '';
                updateCouponInfo(0, data.totalAmount);

                Swal.fire({
                    title: 'Coupon Removed',
                    text: 'Coupon has been removed successfully.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
            } else {
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while removing the coupon. Please try again later.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error removing coupon:', error);
            Swal.fire({
                title: 'Error',
                text: 'An error occurred while removing the coupon. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    }

    // Function to update the coupon information in the DOM
    function updateCouponInfo(discountAmount, totalAmount) {
        const couponInfo = document.getElementById('couponInfo');
        const newTotalPriceElement = document.querySelector('.summary-total .price');

        if (discountAmount > 0) {
            couponInfo.innerHTML = `Coupon Applied: -$${discountAmount} <a href="#" id="removeCoupon" class="btn btn-danger">Remove</a>`;
        } else {
            couponInfo.innerHTML = `<span>Coupon Code:</span> <span><a href="#" id="openCouponModal">Enter Coupon Code</a></span>`;
        }
        
        if (newTotalPriceElement) {
            newTotalPriceElement.textContent = `$${totalAmount}`;
        }
    }

    // Event listener for opening the coupon modal
    document.addEventListener('click', function (event) {
        if (event.target && event.target.id === 'openCouponModal') {
            event.preventDefault();

            Swal.fire({
                title: 'Enter Coupon Code',
                input: 'text',
                inputPlaceholder: 'Enter your coupon code here',
                showCancelButton: true,
                confirmButtonText: 'Apply Coupon',
                cancelButtonText: 'Cancel'
            }).then(result => {
                if (result.isConfirmed && result.value) {
                    const couponCode = result.value.trim();
                    applyCoupon(couponCode);
                }
            });
        }
    });

    // Event delegation for removing the coupon
    document.addEventListener('click', function (event) {
        if (event.target && event.target.id === 'removeCoupon') {
            event.preventDefault();

            Swal.fire({
                title: 'Remove Coupon',
                text: 'Are you sure you want to remove the coupon?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'No, keep it'
            }).then(result => {
                if (result.isConfirmed) {
                    removeCoupon();
                }
            });
        }
    });

    // Event listener for form submission
    document.querySelector('form.checkout-form').addEventListener('submit', function (event) {
        event.preventDefault();

        const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
        const selectedAddressRadio = document.querySelector('input[name="addressId"]:checked');
        const selectedAddressLabel = selectedAddressRadio.nextElementSibling.textContent.split(',');

        const addressDetails = {
            place: selectedAddressLabel[0].trim(),
            houseNumber: selectedAddressLabel[1].trim(),
            street: selectedAddressLabel[2].trim(),
            city: selectedAddressLabel[3].trim(),
            zipcode: selectedAddressLabel[4].trim(),
            country: selectedAddressLabel[5].trim()
        };

        Swal.fire({
            title: 'Confirm Order',
            text: "Are you sure you want to place this order?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, place order!',
            cancelButtonText: 'No, cancel!'
        }).then((result) => {
            if (result.isConfirmed) {
                if (selectedPaymentMethod === 'Razorpay') {
                    fetch('/api/create-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            addressId: selectedAddressRadio.value,
                            paymentMethod: selectedPaymentMethod,
                            ...addressDetails,
                            couponCode: document.getElementById('hiddenCouponCode').value
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.razorpayOrderId) {
                            const options = {
                                key: data.razorpayKeyId,
                                amount: data.totalAmount * 100, // in paise
                                currency: 'INR',
                                name: 'Hossom Shirts',
                                description: 'Order Payment',
                                order_id: data.razorpayOrderId,
                                handler: function (response) {
                                    fetch('/api/verify-payment', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(response)
                                    })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            Swal.fire({
                                                title: 'Payment Successful',
                                                text: 'Your order has been placed successfully.',
                                                icon: 'success',
                                                confirmButtonText: 'OK'
                                            }).then(() => {
                                                window.location.href = '/confirm';
                                            });
                                        } else {
                                            Swal.fire({
                                                title: 'Payment Failed',
                                                text: 'There was an issue with your payment. Please try again.',
                                                icon: 'error',
                                                confirmButtonText: 'OK'
                                            });
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Payment verification failed:', error);
                                        Swal.fire({
                                            title: 'Payment Verification Failed',
                                            text: 'There was an error verifying your payment. Please contact support.',
                                            icon: 'error',
                                            confirmButtonText: 'OK'
                                        });
                                    });
                                },
                                prefill: {
                                    name: data.user.name,
                                    email: data.user.email,
                                    contact: data.user.phone
                                },
                                notes: {
                                    address: data.address
                                },
                                theme: {
                                    color: '#3399cc'
                                }
                            };
                            const rzp = new Razorpay(options);
                            rzp.open();
                        } else {
                            Swal.fire({
                                title: 'Order Creation Failed',
                                text: data.message || 'There was an error creating your order. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Order creation failed:', error);
                        Swal.fire({
                            title: 'Order Creation Failed',
                            text: 'There was an error creating your order. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
                } else {
                    fetch('/api/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            addressId: selectedAddressRadio.value,
                            paymentMethod: selectedPaymentMethod,
                            ...addressDetails,
                            couponCode: document.getElementById('hiddenCouponCode').value
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Order Placed Successfully',
                                text: 'Your order has been placed successfully.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = '/confirm';
                            });
                        } else {
                            Swal.fire({
                                title: 'Order Failed',
                                text: data.message || 'There was an error placing your order. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Order placement failed:', error);
                        Swal.fire({
                            title: 'Order Placement Failed',
                            text: 'There was an error placing your order. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
                }
            }
        });
    });
});

    function deleteAddress(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/address/${id}`, { method: 'DELETE' })
                    .then(response => {
                        if (response.ok) {
                            window.location.href = `/checkout`;
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'Your address has been deleted.',
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            }).then(() => {
                                const row = document.querySelector(`tr[data-id="${id}"]`);
                                if (row) {
                                    row.remove();
                                }
                            });
                        } else {
                            response.json().then(data => {
                                Swal.fire({
                                    title: 'Failed!',
                                    text: data.message || 'Failed to delete address.',
                                    icon: 'error'
                                });
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred while deleting the address.',
                            icon: 'error'
                        });
                        console.error('Error deleting address:', error);
                    });
            }
        });
    }

    function editAddress(id) {
        window.location.href = `/address/edit/${id}`;
    }
</script>
<div class="page-wrapper">
   <div class="checkout shopping">
      <div class="container">
         <div class="row">
            <div class="col-md-8">
               <div class="block billing-details">
                  <h4 class="widget-title">Billing Details</h4>
                  <form class="checkout-form" method="POST" action="/orders">
                     <input type="hidden" id="isAddingNewAddress" name="isAddingNewAddress" value="false">
                     <input type="hidden" name="couponCode" id="hiddenCouponCode">

                     {{#each addresses}}
                     <div class="form-check">
                        <input class="form-check-input" type="radio" name="addressId" id="address{{_id}}"
                           value="{{_id}}">
                        <label class="form-check-label" for="address{{_id}}">
                           {{place}}, {{houseNumber}}, {{street}}, {{city}}, {{zipcode}}, {{country}}
                        </label>
                     </div>
                     {{/each}}
                     <div class="form-check">
                        <input class="form-check-input" type="radio" name="addressId" id="newAddress" value="new">
                        <label class="form-check-label" for="newAddress">
                           Enter new address
                        </label>
                     </div>
                     <div id="newAddressForm" style="display: none;">
                        <div class="form-group">
                           <select class="form-control" id="place" name="place">
                              <option value="home">Home</option>
                              <option value="work">Work</option>
                           </select>
                        </div>
                        <div class="form-group">
                           <label for="houseNumber">House Number</label>
                           <input type="text" class="form-control" id="houseNumber" name="houseNumber"
                              placeholder="House Number">
                        </div>
                        <div class="form-group">
                           <label for="street">Street</label>
                           <input type="text" class="form-control" id="street" name="street" placeholder="Street">
                        </div>
                        <div class="form-group">
                           <label for="city">City</label>
                           <input type="text" class="form-control" id="city" name="city" placeholder="City">
                        </div>
                        <div class="form-group">
                           <label for="zipcode">Zip Code</label>
                           <input type="text" class="form-control" id="zipcode" name="zipcode" placeholder="Zip Code">
                        </div>
                        <div class="form-group">
                           <label for="country">Country</label>
                           <input type="text" class="form-control" id="country" name="country" placeholder="Country">
                        </div>
                     </div>
                     <h4 class="widget-title">Payment Method</h4>
                     <div class="form-check">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="cod" value="COD">
                        <label class="form-check-label" for="cod">
                           Cash on Delivery
                        </label>
                     </div>
                     <div class="form-check">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="Wallet">
                        <label class="form-check-label" for="wallet">
                           Wallet
                        </label>
                     </div>
                     <div class="form-check">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="razorpay"
                           value="Razorpay">
                        <label class="form-check-label" for="razorpay">
                           Razorpay
                        </label>
                     </div>



                     <button type="submit" class="btn btn-main mt-20">Place Order</button>
                  </form>
               </div>
            </div>
            <div class="col-md-4">
               <div class="product-checkout-details">
                  <div class="block">
                     <h4 class="widget-title">Order Summary</h4>
                     {{#each cart.items}}
                     <div class="media product-card">
                        <a class="pull-left" href="product-single.html">
                           <img class="media-object" src="/uploads/products/{{this.product.mainImage}}" alt="Image">
                        </a>
                        <div class="media-body">
                           <h4 class="media-heading"><a href="product-single.html">{{this.product.name}}</a></h4>
                           <p class="price">{{this.quantity}} x {{this.product.price}}</p>
                        </div>
                     </div>
                     {{/each}}
                     <ul class="summary-prices">
                        <li>
                           <span>Shipping:</span>
                           <span>Free</span>
                        </li>
                        <li id="couponInfo">
                           <span>Coupon Code:</span>
                           <span>
                              <a href="#" id="openCouponModal">Enter Coupon Code</a>
                              <a href="#" id="removeCoupon" style="display:none;">Remove Coupon</a>
                           </span>
                        </li>
                     </ul>
                     <div class="summary-total">
                        <span>Total</span>
                        <span class="price">${{cart.totalPrice}}</span>
                     </div>

                     <div class="verified-icon">
                        <img src="/images/shop/verified.png" alt="Verified">
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div>
   </div>
</div>

<!-- Modal -->
<div class="modal fade" id="coupon-modal" tabindex="-1" role="dialog">
   <div class="modal-dialog" role="document">
      <div class="modal-content">
         <div class="modal-body">
            <form id="couponForm">
               <div class="form-group">
                  <input id="modalCouponCode" class="form-control" type="text" placeholder="Enter Coupon Code">
               </div>
               <button type="button" id="applyModalCoupon" class="btn btn-main">Apply Coupon</button>
            </form>
         </div>
      </div>
   </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
   document.addEventListener('DOMContentLoaded', function () {
      document.querySelectorAll('input[name="addressId"]').forEach(radio => {
         radio.addEventListener('change', function () {
            const newAddressForm = document.getElementById('newAddressForm');
            if (this.value === 'new') {
               newAddressForm.style.display = 'block';
            } else {
               newAddressForm.style.display = 'none';
            }
         });
      });

      document.getElementById('openCouponModal').addEventListener('click', function (event) {
         event.preventDefault();
         $('#coupon-modal').modal('show');
      });

       document.getElementById('applyModalCoupon').addEventListener('click', function () {
        const couponCode = document.getElementById('modalCouponCode').value;
        fetch('/api/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponCode })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(err.message); });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                document.getElementById('hiddenCouponCode').value = couponCode;
                document.getElementById('removeCoupon').style.display = 'inline';

                const newTotalPriceElement = document.querySelector('.summary-total .price');
                const couponInfo = document.getElementById('couponInfo');

                if (newTotalPriceElement && couponInfo) {
                    newTotalPriceElement.textContent = `$${data.newTotal}`;
                    couponInfo.innerHTML = `Coupon Applied: -$${data.discountAmount} <a href="#" id="removeCoupon">Remove Coupon</a>`;
                    $('#coupon-modal').modal('hide');
                    Swal.fire({
                        title: 'Coupon Applied',
                        text: `Discount applied: $${data.discountAmount}`,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                }
            } else {
                Swal.fire({
                    title: 'Invalid Coupon',
                    text: data.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error applying coupon:', error);
            Swal.fire({
                title: 'Error',
                text: 'An error occurred while applying the coupon. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    });

    document.addEventListener('click', function(event) {
        if (event.target && event.target.id === 'removeCoupon') {
            event.preventDefault();
            fetch('/api/remove-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('hiddenCouponCode').value = '';
                    document.getElementById('removeCoupon').style.display = 'none';

                    const newTotalPriceElement = document.querySelector('.summary-total .price');
                    const couponInfo = document.getElementById('couponInfo');

                    if (newTotalPriceElement && couponInfo) {
                        newTotalPriceElement.textContent = `$${data.totalAmount}`;
                        couponInfo.innerHTML = `<span>Coupon Code:</span> <span><a href="#" id="openCouponModal">Enter Coupon Code</a></span>`;
                        Swal.fire({
                            title: 'Coupon Removed',
                            text: 'Coupon has been removed.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    }
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred while removing the coupon. Please try again later.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            })
            .catch(error => {
                console.error('Error removing coupon:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while removing the coupon. Please try again later.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            });
        }
    });

      document.querySelector('form.checkout-form').addEventListener('submit', function (event) {
         event.preventDefault();

         const isAddingNewAddress = document.querySelector('input[name="addressId"]:checked').value === 'new';
         document.getElementById('isAddingNewAddress').value = isAddingNewAddress;

         if (isAddingNewAddress) {
            const place = document.getElementById('place').value;
            const houseNumber = document.getElementById('houseNumber').value;
            const street = document.getElementById('street').value;
            const city = document.getElementById('city').value;
            const zipcode = document.getElementById('zipcode').value;
            const country = document.getElementById('country').value;

            if (!place || !houseNumber || !street || !city || !zipcode || !country) {
               alert('Please fill out all fields for the new address.');
               return;
            }
         }

         const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

         if (selectedPaymentMethod === 'Razorpay') {
            // Fetch order details from the server
            fetch('/api/create-order', {
               method: 'POST',
               headers: {
                  'Content-Type': 'application/json'
               },
               body: JSON.stringify({
                  addressId: document.querySelector('input[name="addressId"]:checked').value,
                  paymentMethod: selectedPaymentMethod,
                  place: place,
                  houseNumber: houseNumber,
                  street: street,
                  city: city,
                  zipcode: zipcode,
                  country: country,
                  couponCode: document.getElementById('hiddenCouponCode').value
               })
            })
               .then(response => response.json())
               .then(data => {
                  if (data.success && data.razorpayOrderId) {
                     const options = {
                        key: data.razorpayKeyId,
                        amount: data.totalAmount * 100, // in paise
                        currency: 'INR',
                        name: 'Hossom Shirts',
                        description: 'Order Payment',
                        order_id: data.razorpayOrderId,
                        handler: function (response) {
                           // Verify payment on the server
                           fetch('/api/verify-payment', {
                              method: 'POST',
                              headers: {
                                 'Content-Type': 'application/json'
                              },
                              body: JSON.stringify(response)
                           })
                              .then(response => response.json())
                              .then(data => {
                                 if (data.success) {
                                    Swal.fire({
                                       title: 'Payment Successful',
                                       text: 'Your order has been placed successfully.',
                                       icon: 'success',
                                       confirmButtonText: 'OK'
                                    }).then(() => {
                                       window.location.href = '/confirm';
                                    });
                                 } else {
                                    Swal.fire({
                                       title: 'Payment Failed',
                                       text: 'There was an issue with your payment. Please try again.',
                                       icon: 'error',
                                       confirmButtonText: 'OK'
                                    });
                                 }
                              })
                              .catch(error => {
                                 console.error('Payment verification failed:', error);
                                 Swal.fire({
                                    title: 'Payment Verification Failed',
                                    text: 'There was an error verifying your payment. Please contact support.',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                 });
                              });
                        },
                        prefill: {
                           name: data.user.name,
                           email: data.user.email,
                           contact: data.user.phone
                        },
                        notes: {
                           address: data.address
                        },
                        theme: {
                           color: '#3399cc'
                        }
                     };
                     const rzp = new Razorpay(options);
                     rzp.open();
                  } else {
                     Swal.fire({
                        title: 'Order Creation Failed',
                        text: data.message || 'There was an error creating your order. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                     });
                  }
               })
               .catch(error => {
                  console.error('Order creation failed:', error);
                  Swal.fire({
                     title: 'Order Creation Failed',
                     text: 'There was an error creating your order. Please try again.',
                     icon: 'error',
                     confirmButtonText: 'OK'
                  });
               });
         } else {
            Swal.fire({
               title: 'Confirm Order',
               text: "Are you sure you want to place this order?",
               icon: 'warning',
               showCancelButton: true,
               confirmButtonText: 'Yes, place order!',
               cancelButtonText: 'No, cancel!'
            }).then((result) => {
               if (result.isConfirmed) {
                  event.target.submit();
               }
            });
         }
      });
   });
</script>
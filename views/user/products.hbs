<section class="products section">
    <div class="container">
        <div class="row">
            <div class="col-md-3">
                <div class="widget product-category">
                    <h4 class="widget-title">Categories</h4>
                    <div class="panel-group commonAccordion" id="accordion" role="tablist" aria-multiselectable="true">
                        {{#each categories}}
                        <div class="panel panel-default">
                            <div class="panel-heading" role="tab" id="heading{{this._id}}">
                                <h4 class="panel-title">
                                    <a role="button" href="/products?category={{this._id}}">
                                        {{this.name}}
                                    </a>
                                </h4>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                    <div class="mt-3">
                        <h4>Price Range</h4>
                        <label>
                            <input type="radio" name="sort" value="priceLow" {{#if (eq sort 'priceLow')}}checked{{/if}}> Price: Low to High
                        </label>
                        <label>
                            <input type="radio" name="sort" value="priceHigh" {{#if (eq sort 'priceHigh')}}checked{{/if}}> Price: High to Low
                        </label>
                    </div>
                    <div>
                        <h4>Products</h4>
                        <label>
                            <input type="radio" name="productType" value="new" {{#if (eq productType 'new')}}checked{{/if}}> New Arrivals
                        </label>
                        <br>
                        <label>
                            <input type="radio" name="productType" value="old" {{#if (eq productType 'old')}}checked{{/if}}> Existing Products
                        </label>
                    </div>
                </div>

                <!-- Add Clear Filter Button -->
                <div class="clear-filter">
                    <a href="/products" class="btn btn-primary">Clear Filter</a>
                </div>
            </div>
            <div class="col-md-9">
                <div class="row">
                    {{#if products.length}}
                      {{#each products}}
<div class="col-md-4">
    <div class="product-item" data-product-id="{{this._id}}">
        <div class="product-thumb">
            {{#if this.discountedPrice}}
            <span class="badge">Sale</span>
            {{/if}}
            <img src="/uploads/products/{{this.mainImage}}" class="card-img-top img-responsive" alt="{{this.name}}">
            <div class="preview-meta">
                <ul>
                    <li>
                        <a href="/products/{{this._id}}"><i class="tf-ion-ios-search-strong"></i></a>
                    </li>
                    <li>
                        <a href="#!"><i class="tf-ion-ios-heart"></i></a>
                    </li>
                    <li>
                        <a href="#!" class="add-to-cart"><i class="tf-ion-android-cart"></i></a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="product-content">
            <h4><a href="/products/{{this._id}}">{{this.name}}</a></h4>
            {{#if this.discountedPrice}}
            <p class="product-price"><del>₹{{this.price}}</del> ₹{{this.discountedPrice}}</p>
            {{else}}
            <p class="product-price">₹{{this.price}}</p>
            {{/if}}
            {{#if this.variants.length}}
            <div class="variant-selection">
                <select class="form-control variant-size">
                    {{#each this.variants}}
                    <option value="{{size}}" data-stock="{{stock}}">{{size}} ({{stock}} in stock)</option>
                    {{/each}}
                </select>
            </div>
            {{/if}}
        </div>
    </div>
</div>
{{/each}}


                    {{else}}
                    <div class="col-md-12">
                        <div class="alert alert-info" role="alert">
                            No products available. Please try a different category or filter.
                        </div>
                    </div>
                    {{/if}}
                </div>

                <!-- Pagination -->
                {{#if totalPages}}
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        {{#if (gt currentPage 1)}}
                        <li class="page-item">
                            <a class="page-link" href="/products?page={{subtract currentPage 1}}{{#if ../category}}&category={{../category}}{{/if}}{{#if ../sort}}&sort={{../sort}}{{/if}}{{#if ../productType}}&productType={{../productType}}{{/if}}" aria-label="Previous">
                                <span aria-hidden="true">&laquo; Previous</span>
                            </a>
                        </li>
                        {{/if}}

                        {{#each (range 1 totalPages)}}
                        <li class="page-item {{#eq this ../currentPage}}active{{/eq}}">
                            <a class="page-link" href="/products?page={{this}}{{#if ../category}}&category={{../category}}{{/if}}{{#if ../sort}}&sort={{../sort}}{{/if}}{{#if ../productType}}&productType={{../productType}}{{/if}}">{{this}}</a>
                        </li>
                        {{/each}}

                        {{#if (lt currentPage totalPages)}}
                        <li class="page-item">
                            <a class="page-link" href="/products?page={{add currentPage 1}}{{#if ../category}}&category={{../category}}{{/if}}{{#if ../sort}}&sort={{../sort}}{{/if}}{{#if ../productType}}&productType={{../productType}}{{/if}}" aria-label="Next">
                                <span aria-hidden="true">Next &raquo;</span>
                            </a>
                        </li>
                        {{/if}}
                    </ul>
                </nav>
                {{/if}}
            </div>
        </div>
    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const sortRadioButtons = document.querySelectorAll('input[type="radio"][name="sort"]');
        sortRadioButtons.forEach(function (radioButton) {
            radioButton.addEventListener('click', function () {
                const sortValue = this.value;
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.set('sort', sortValue);
                window.location.href = currentUrl.toString();
            });
        });
const addToWishlistButtons = document.querySelectorAll('.tf-ion-ios-heart');
    addToWishlistButtons.forEach(function (button) {
        button.addEventListener('click', async function (event) {
            event.preventDefault(); // Prevent the default link click behavior
            const productItem = this.closest('.product-item');
            const productId = productItem.dataset.productId;

            if (!isLoggedIn) {
                Swal.fire({
                    title: 'Not Logged In',
                    text: 'You need to log in to add items to the wishlist.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Log In',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/login';
                    }
                });
                return;
            }

            try {
                const response = await fetch(`/wishlist/add`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });

                const result = await response.json();

                if (response.status === 200 && result.success) {
                    Swal.fire({
                        title: 'Added to wishlist',
                        text: 'Product added to your wishlist.',
                        icon: 'success'
                    });
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: result.message || 'Something went wrong',
                        icon: 'error'
                    });
                }
            } catch (error) {
                console.error('Error adding to wishlist:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred. Please try again.',
                    icon: 'error'
                });
            }
        });
    });
        const productTypeRadioButtons = document.querySelectorAll('input[type="radio"][name="productType"]');
        productTypeRadioButtons.forEach(function (radioButton) {
            radioButton.addEventListener('click', function () {
                const productTypeValue = this.value;
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.set('productType', productTypeValue);
                window.location.href = currentUrl.toString();
            });
        });

        // Check if the user is logged in
        const isLoggedIn = {{#if user}}true{{else}}false{{/if}};

        // Event listener for the "Add to Cart" buttons
        const addToCartButtons = document.querySelectorAll('.add-to-cart');
        addToCartButtons.forEach(function (button) {
            button.addEventListener('click', async function (event) {
                event.preventDefault(); // Prevent the default link click behavior
                const productItem = this.closest('.product-item');
                const productId = productItem.dataset.productId;
                const sizeSelect = productItem.querySelector('.variant-size');
                const variantSize = sizeSelect ? sizeSelect.value : null;
                const stock = sizeSelect ? parseInt(sizeSelect.selectedOptions[0].getAttribute('data-stock'), 10) : null;

                if (!isLoggedIn) {
                    Swal.fire({
                        title: 'Not Logged In',
                        text: 'You need to log in to add items to the cart.',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Log In',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/login';
                        }
                    });
                    return;
                }

                // Check if stock is available before proceeding
                if (stock === 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Out of Stock',
                        text: 'The selected size is currently out of stock. Please choose a different size.',
                    });
                    return;
                }

                try {
                    const response = await fetch(`/add-to-cart`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ productId, quantity: 1, variantSize })
                    });

                    const result = await response.json();

                    if (response.status === 200 && result.success) {
                        Swal.fire({
                            title: 'Added to cart',
                            text: 'Continue shopping?',
                            icon: 'success',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'Go to Cart'
                        }).then((result) => {
                            if (result.dismiss === Swal.DismissReason.cancel) {
                                window.location.href = '/cart/data';
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: result.message || 'Something went wrong',
                            icon: 'error'
                        });
                    }
                } catch (error) {
                    console.error('Error adding to cart:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred. Please try again.',
                        icon: 'error'
                    });
                }
            });
        });
            
    });



</script>
